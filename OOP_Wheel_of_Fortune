VOWEL_COST = 250
LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
VOWELS = 'AEIOU'

import random
# The WOFPlayer class definition (part A) here
class WOFPlayer:
    def __init__(self,name):
        self.name = name
        self.prizeMoney = 0
        self.prizes = []
    
    def addMoney(self,amt):
        self.prizeMoney = self.prizeMoney+amt
     
    def goBankrupt(self):
        self.prizeMoney = 0
      
    def addPrize(self,prize):
        self.prizes.append(prize)
        
    def __str__(self):
        return "{} (${})".format(self.name,self.prizeMoney)
# Write the WOFHumanPlayer class definition (part B) here
class WOFHumanPlayer(WOFPlayer):
    
    def getMove(category,obscuredPhrase,guessed):
        a = input("{} has {}\n \nCategory: {} \nPharse: {} \nGuessed: {}\n \nGuess a letter, phrase, or type 'exit' or 'pass':".format(self.name,self.prizeMoney,category,obscuredPhrase,guessed))
# The WOFComputerPlayer class definition (part C) here
class WOFComputerPlayer(WOFPlayer):
    SORTED_FREQUENCIES = 'ZQXJKVBPYGFWMUCLDRHSNIOATE'
    
    def __init__(self,name,difficulty):
        WOFPlayer.__init__(self,name)
        self.difficulty = difficulty
        
    def smartCoinFlip(self):
        rand  = random.randint(1,10)
        if rand > self.difficulty:
            return True
        else:
            return False
    
    def getPossibleLetters(self,guessed):
        possible_list = []
        for i in LETTERS:
            if i in VOWELS and not i in guessed:
                if self.prizeMoney >=250:
                    possible_list.append(i)
            else:
                if not i in guessed:
                    possible_list.append(i)
        return possible_list
    
    def getMove(self,category, obscuredPhrase, guessed):
        possible_list = self.getPossibleLetters(guessed)
        z = []
        for i in possible_list:
            if i in VOWELS:
                z.append('False')
            else:
                z.append("True")
      
        if not "True" in z and self.prizeMoney >=250:
            z.append("True")
        if not "True" in z and self.prizeMoney<250:
            return "pass"
       
        if "True" in z and self.prizeMoney >=250:          
            frequency_list = []
            for i in self.SORTED_FREQUENCIES:
                if not i in guessed:
                    frequency_list.append(i)
            if self.smartCoinFlip():
                return frequency_list[-1]
            else:
                return random.choice(frequency_list)
        
       
        
